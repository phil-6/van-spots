<div id="map" class="map"></div>

<script>
    var map;
    //creates a new blank array for all the listing markers
    var markers = [];
    var markerCluster;



    function initMap() {
        // Constructor create a new map, only center and zoom are required.
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 51.600000, lng: -4.150000},
            zoom: 12,
            mapTypeControl: true,
            mapTypeControlOptions: {
                position: google.maps.ControlPosition.LEFT_BOTTOM
            },
            streetViewControl: false,
            mapTypeId: 'terrain'
        });
        /**
         * Move Street View Address Controls from underneath nav bar.
         * Control formatting is broken for unknown reason.
         * Likely due to a bootstrap conflict - street view disabled for now.
         */
        /*map.get('streetView').setOptions({
         addressControlOptions: {
         position: google.maps.ControlPosition.BOTTOM_CENTER
         },
         fullscreenControl: false
         });*/


        /**
         ==========
         Create Markers
         ==========
         */
            // Create Markers array and populate it from API
        var apiUrl = ('/api/spots');
        var infoWindow = new google.maps.InfoWindow();

        $.getJSON(apiUrl, function (json1) {
            $.each(json1, function (key, data) {
                var position = new google.maps.LatLng(data.latitude, data.longitude);

                var marker = new google.maps.Marker({
                    map: map,
                    position: position,
                    id: data.id,
                    name: data.name,
                    description: data.description,
                    animation: google.maps.Animation.DROP
                });

                // Push the marker to our array of markers.
                markers.push(marker);
                markerCluster.addMarker(marker);
                // Create an onclick event to open an infowindow at each marker.
                marker.addListener('click', function () {
                    populateInfoWindow(this, infoWindow);
                });
            });
        });


        // Create the DIV to hold the control and call the CenterControl()
        // constructor
        // passing in this DIV.
        var mapFilterControlsDiv = document.createElement('div');
        var mapFilterControls = new MapFilterControls(mapFilterControlsDiv, map);
        mapFilterControlsDiv.index = 1;
//            mapFilterControlsDiv.style['padding-top'] = '10px';
        map.controls[google.maps.ControlPosition.LEFT_CENTER].push(mapFilterControlsDiv);
        // Add a marker clusterer to manage the markers.
        markerCluster = new MarkerClusterer(map, [],
            {imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m"});
//../resources/images/markerClusterer/m"
        /**
         ==========
         Show User Location
         ==========
         */
        /** WILL NOT WORK UNTIL CONNECTION IS HTTPS */
        //User loctation
         var infoWindow = new google.maps.InfoWindow({map: map});
         // Try HTML5 geolocation.
         if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                infoWindow.setPosition(pos);
                infoWindow.setContent('Location found.');
                map.setCenter(pos);
            }, function() {
                handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        }
    }
    /*Location Error Handling*/
    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
            'Error: The Geolocation service failed.' :
            'Error: Your browser doesn\'t support geolocation.');
    }
    /**
     ==========
     Info Windows
     ==========
     */
    /**
     *  This function populates the infowindow when the marker is clicked. We'll only allow
     * one infowindow which will open at the marker that is clicked, and populate based
     * on that markers position.
     */
    function populateInfoWindow(marker, infowindow) {
        // Check to make sure the infowindow is not already opened on this marker.
        if (infowindow.marker !== marker) {
            //add information to info window
            var infoWindowContent = '<div id="content">' +
                '<h2 id="infoWindowHeading" class="infoWindowHeading">' +
                '<a href="/spots/' + marker.id + '">' + marker.name + '</a></h2>' +
                '<div id="infoWindowContent" class="infoWindowContent">' +
                '<p>' + marker.description +
                '</p></div>' +
                '</div>';
            infowindow.marker = marker;
            infowindow.setContent(infoWindowContent);
            infowindow.open(map, marker);
            // Make sure the marker property is cleared if the infowindow is closed.
            infowindow.addListener('closeclick', function () {
                infowindow.marker = null;
            });
        }
    }
    /**
     ==========
     Filters
     ==========
     */
    /**
     * These functions control all the map filters.
     * Any marker property can be used to filter
     * Require click listeners to work
     * something else because these are pretty darn important
     */
    //          //
    // SHOW ALL //
    //          //
    // This function will loop through the markers array and display them all.
    function showListings() {
        var bounds = new google.maps.LatLngBounds();
        // Extend the boundaries of the map for each marker and display the marker
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
            markerCluster.addMarker(markers[i]);
            bounds.extend(markers[i].position);
        }
        map.fitBounds(bounds);
        markerCluster.repaint();
    }
    //          //
    // HIDE ALL //
    //          //
    // This function will loop through the listings and hide them all.
    function hideListings() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
            markerCluster.removeMarker(markers[i]);
        }
    }
    //             //
    // FILTER TRAD //
    //             //
    // This function will loop through the listings and hide them all.
    // Then redraws all Trad Crags
    // function filterTrad() {
    //     //Create new empty boundaries
    //     var bounds = new google.maps.LatLngBounds();
    //     //Clear markers from map
    //     for (var i = 0; i < markers.length; i++) {
    //         markers[i].setMap(null);
    //         markerCluster.removeMarker(markers[i]);
    //     }
    //     //Redraw filtered markers
    //     for (var i = 0; i < markers.length; i++) {
    //         for (var j = 0; j < markers[i].typeOfClimbs.length; j++) {
    //             //console.log(markers[i].typeOfClimbs[j]);
    //             if (markers[i].typeOfClimbs[j]['id'] === 1) {
    //                 markers[i].setMap(map);
    //                 markerCluster.addMarker(markers[i]);
    //                 bounds.extend(markers[i].getPosition());
    //             }
    //         }
    //     }
    //     map.fitBounds(bounds);
    //     markerCluster.repaint();
    // }
    //              //
    // FILTER SPORT //
    //              //
    // This function will loop through the listings and hide them all.
    // Then redraws all Sport Crags
    // function filterSport() {
    //     //Create new empty boundaries
    //     var bounds = new google.maps.LatLngBounds();
    //     //Clear markers from map
    //     for (var i = 0; i < markers.length; i++) {
    //         markers[i].setMap(null);
    //         markerCluster.removeMarker(markers[i]);
    //     }
    //     //Redraw filtered markers
    //     for (var i = 0; i < markers.length; i++) {
    //         for (var j = 0; j < markers[i].typeOfClimbs.length; j++) {
    //             //console.log(markers[i].typeOfClimbs[j]);
    //             if (markers[i].typeOfClimbs[j]['id'] === 2) {
    //                 markers[i].setMap(map);
    //                 markerCluster.addMarker(markers[i]);
    //                 bounds.extend(markers[i].getPosition());
    //             }
    //         }
    //     }
    //     //Zoom the map to show remaining markers
    //     map.fitBounds(bounds);
    //     //Repaint any marker clustering.
    //     markerCluster.repaint();
    // }

    /**
     ==========
     Filter Buttons
     ==========
     */
    /**
     * Adds controls for map filters
     * Each control has a border, an interior and an event listener
     * the rest should be obvious
     */
    function MapFilterControls(controlDiv, map, center) {
        //          //
        // SHOW ALL //
        //          //
        // Set CSS for the SHOW ALL control border
        var showAllUI = document.createElement('div');
        showAllUI.id = 'showAllUI';
        showAllUI.title = 'Show all listings';
        controlDiv.appendChild(showAllUI);
        // Set CSS for the SHOW ALL control interior
        var showAllText = document.createElement('div');
        showAllText.id = 'showAllText';
        showAllText.innerHTML = 'Show All';
        showAllUI.appendChild(showAllText);
        //          //
        // HIDE ALL //
        //          //
        // Set CSS for the HIDE ALL control border
        var hideAllUI = document.createElement('div');
        hideAllUI.id = 'hideAllUI';
        hideAllUI.title = 'Hide all listings';
        controlDiv.appendChild(hideAllUI);
        // Set CSS for the HIDE ALL interior
        var hideAllText = document.createElement('div');
        hideAllText.id = 'hideAllText';
        hideAllText.innerHTML = 'Hide All';
        hideAllUI.appendChild(hideAllText);
        //             //
        // FILTER TRAD //
        //             //
        // Set CSS for the FILTER TRAD control border
        // var filterTradUI = document.createElement('div');
        // filterTradUI.id = 'filterTradUI';
        // filterTradUI.title = 'Show Crags with Trad Routes';
        // controlDiv.appendChild(filterTradUI);
        // // Set CSS for the FILTER TRAD interior
        // var filterTradText = document.createElement('div');
        // filterTradText.id = 'filterTradText';
        // filterTradText.innerHTML = 'Show Trad';
        // filterTradUI.appendChild(filterTradText);
        //              //
        // FILTER SPORT //
        //              //
        // Set CSS for the FILTER SPORT control border
        // var filterSportUI = document.createElement('div');
        // filterSportUI.id = 'filterSportUI';
        // filterSportUI.title = 'Show Crags with Sport Routes';
        // controlDiv.appendChild(filterSportUI);
        // // Set CSS for the FILTER SPORT interior
        // var filterSportText = document.createElement('div');
        // filterSportText.id = 'filterSportText';
        // filterSportText.innerHTML = 'Show Sport';
        // filterSportUI.appendChild(filterSportText);

        showAllUI.addEventListener('click', showListings);
        hideAllUI.addEventListener('click', hideListings);
        // filterTradUI.addEventListener('click', filterTrad);
        // filterSportUI.addEventListener('click', filterSport);
    }
    $(".controlDiv").on('click', 'div', function (e) {
        $(this).parent().find('div.active').removeClass('active');
        $(this).addClass('active');
    });
</script>






<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
<!--"../js/markerClusterer/markerclusterer.js"-->


<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCE5X84xnBlmcKrmboDTqXXnAK7-ZflajA&callback=initMap">
</script>


<!-- Plugin JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>